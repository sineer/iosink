#!/bin/sh

###
### I/O SINK
###
### The iocage friendly ZFS replication manager.
###
### https://github.com/sineer/iosink
###
### Copyright (c) 2015-2016, Sineer
###

iocroot="tank/ioc"
ZREP=/usr/local/sbin/zrep
SSH='ssh -p 295'
ZREP_R=''

__setenv () {
    export SSH=$SSH
    export ZREP_R=${ZREP_R}
}


__usage  () {
    # TODO:
    echo "iosink usage: ..."
}

__parse_cmd () {
    while [ $# -gt 0 ] ; do
        case "$1" in
            list)     __list "$2"
                      exit
                      ;;
            info)     __info "$2" "$3"
                      exit
                      ;;
            status)   __status "$2" "$3"
                      exit
                      ;;
            sink)     __sink "$2" "$3"
                      exit
                      ;;
            rsink)    __rsink "$2" "$3" "$4"
                      exit
                      ;;
            failover) __failover "$2" "$3" "$4" "$5"
                      exit
                      ;;
            takeover) __takeover "$2" "$3" "$4"
                      exit
                      ;;
            pull)     __pull "$2"
                      exit
                      ;;
            push)     __push "$2"
                      exit
                      ;;
            *)        __usage
                      exit
        esac
        shift
    done
}


__find () {
    local _name _sinks _slist _zlist _fs _tag _found _pfs _is_child
    _name=$1
    _sinks=""
    _slist=""
    _zlist="$(zrep list)"

    for _fs in $(echo ${_zlist}) ; do
        _sinks="${_sinks} ${_fs}"
    done

    if [ -z ${_name} ] ; then
        # ALL SINK(s)
        echo ${_sinks}
    else
        _pfs="//"
        for _sink in $(echo ${_sinks}) ; do
            # skip child FS
            _is_child=$(echo "${_sink}" | grep "${_pfs}")
            if [ -z "${_is_child}" ] ; then

                _found="$(echo ${_sink} | grep -iE "*./${_name}")"
                _tag="$(zfs get -H -o value org.freebsd.iocage:tag ${_sink})"

                if [ "${_tag}" == "${_name}" ] ; then
                    _slist="${_sink}"
                    break
                elif [ "${#_found}" -gt 0 ] ; then
                    _slist="${_slist} ${_sink}"
                fi

                _pfs=${_sink}
            fi
        done
        if [ "$(echo ${_slist}|wc -w)" -eq "1" ] ; then
            echo "${_slist}"
        elif [ "$(echo ${_slist}|wc -w)" -gt "1" ] ; then
            __die "multiple sinks matching name: $_name"
        else
            # NO SINK
            echo ""
        fi
    fi
}

__list () {
    local _switch _sinks _format _type _stype _uuid _tag \
          _fs _pfs _is_child _zsnap _zcnt _zlast _ztime

    _pfs="//"
    _type=""
    _switch=$1
    _sinks=$(__find)

    if [ -z "${_sinks}" ] ; then
        __die "NO SINK!"
    fi
    if [ ! -z "${_switch}" -a "${_switch}" == "-j" ] ; then
        _type="JAIL"
    elif [ ! -z "${_switch}" -a "${_switch}" == "-b" ] ; then
        _type="BASE"
    elif [ ! -z "${_switch}" -a "${_switch}" == "-s" ] ; then
        _type="SINK"
    elif [ ! -z "${_switch}" -a "${_switch}" == "-n" ] ; then
        _type="NONE"
    elif [ ! -z "${_switch}" ] ; then
        __die "invalid switch ${_switch}"
    fi

    _format="%-5s  %-13s  %-13s  %-11s %-6s  %-6s %-3s  %s\n"
    printf "<${_format}" "TYPE>" "<UUID>" "<TAG>" "<LAST SYNC>" "<SIZE>" "<RAT>" "<#>" "<FS>"
    _format="%-5s  %-13s  %-13s   %-11s %-6s %-6s  %-3s %s\n"

    for _fs in ${_sinks} ; do

        if [ ! -z $(echo "${_fs}" | grep "${iocroot}" | grep "/base/") ] ; then
            _stype="BASE"
        elif [ ! -z $(echo "${_fs}" | grep "${iocroot}" | grep "/jails/") ] ; then
            _stype="JAIL"
        elif [ ! -z $(echo "${_fs}" | grep "${iocroot}" | grep "/sinks/") ] ; then
            _stype="SINK"
        else
            _stype="NONE"
        fi

        # PRINT BASE(s), JAIL(s) and SINK(s)
        if [ ${_stype} == "BASE" ] || [ ${_stype} == "JAIL" ] || [ ${_stype} == "SINK" ] ; then

            # Select proper child FS for $_zsnap based on sink type
            if [ ${_stype} == "BASE" ] ; then
                _zsnap=$(zfs list -H -o name -r -t snap ${_fs} | grep ${_fs}@zrep)
            elif [ ${_stype} == "JAIL" ] || [ ${_stype} == "SINK" ] ; then
                _zsnap=$(zfs list -H -o name -r -t snap ${_fs} | grep ${_fs}/_@zrep)
            else
                __die "LOGIC ERROR, INVALID TYPE: ${_stype}"
            fi

            # skip child FS
            _is_child=$(echo "${_fs}" | grep "${_pfs}")
            if [ -z "${_is_child}" ] ; then

                _uuid=$(zfs get -H -o value org.freebsd.iocage:host_hostuuid ${_fs})
                _tag=$(zfs get -H -o value org.freebsd.iocage:tag ${_fs})
                _zlast=$(echo ${_zsnap} | grep -oE '[^ ]+$')
                _zcnt="$(echo ${_zsnap} | wc -w)"
                _zsize=$(zfs get -H -o value logicalreferenced ${_zlast})
                _zratio=$(zfs get -H -o value compressratio ${_zlast})
                _ztime=$(zfs get -H -o value creation ${_zlast})
                _ztime=$(date -j -f "%a %b %d %H:%M %Y" "${_ztime}" "+%Y-%m-%d")

                if [ ${_stype} == "BASE" ] ; then
                    ## BASE ##
                    if [ -z "${_type}" ] || [ "${_type}" == "BASE" ] ; then
                        printf " ${_format}" "BASE" $_uuid $_tag $_ztime $_zsize $_zratio $_zcnt $_fs
                    fi
                elif [ ${_stype} == "JAIL" ] ; then
                    ## JAIL ##
                    if [ -z "${_type}" ] || [ "${_type}" == "JAIL" ] ; then
                        printf " ${_format}" "JAIL" $_uuid $_tag $_ztime $_zsize $_zratio $_zcnt $_fs
                    fi
                elif [ ${_stype} == "SINK" ] ; then
                    ## SINK ##
                    if [ -z "${_type}" ] || [ "${_type}" == "SINK" ] ; then
                        printf " ${_format}" "SINK" $_uuid $_tag $_ztime $_zsize $_zratio $_zcnt $_fs
                    fi
                else
                    __die "LOGIC ERROR, INVALID TYPE: ${_stype}"
                fi
                _pfs=$_fs
            fi

        else
            # Print all ZREP root and child FS
            if [ -z "${_type}" ] || [ "${_type}" == "NONE" ] ; then

                _uuid=$(zfs get -H -o value org.freebsd.iocage:host_hostuuid ${_fs})
                _tag=$(zfs get -H -o value org.freebsd.iocage:tag ${_fs})
                _zsnap=$(zfs list -H -o name -r -t snap ${_fs} | grep ${_fs}@zrep)
                _zlast=$(echo ${_zsnap} | grep -oE '[^ ]+$')
                _zcnt="$(echo ${_zsnap} | wc -w)"
                _zsize=$(zfs get -H -o value logicalreferenced ${_zlast})
                _zratio=$(zfs get -H -o value compressratio ${_zlast})
                _ztime=$(zfs get -H -o value creation ${_zlast})
                _ztime=$(date -j -f "%a %b %d %H:%M %Y" "${_ztime}" "+%Y-%m-%d")

                printf " ${_format}" "ZREP" $_uuid $_tag $_ztime $_zsize $_zratio $_zcnt $_fs
            fi
        fi
    done

}


__info () {
    echo "<INFO>" $1 $2
    local _sink _name

    _name=$1
    _sink=$(__find ${_name})
    if [ -z ${_sink} ] ; then
        __die "sink not found for name: ${_name}"
    fi

}

__status() {
    echo "<STATUS>" $1 $2
    local _sink

    _sink=$(__find ${_name})
    if [ -z ${_sink} ] ; then
        __die "sink not found for name: ${_name}"
    fi

}


__sink () {
    echo "<SINK>" $1 $2
    # TODO: How to zrep without ssh? VS no zrep (do my own or tweak zrep..?)
    __die "LOCAL SINK NOT YET IMPLEMENTED"
}

__rsink () {
    echo "<REMOTE SINK>" $1 $2 $3
    local _src _dst _remote _children
    _src=$1
    _dst=$3
    _remote=$2
    _children="$(zfs list -rH -o name ${_src} | grep -Ev "${_src}$|/root$")"

    if [ -z ${_remote} ] ; then
        echo "ERROR: NO HOST SPECIFIED."
        exit 1
    fi
    if [ -z ${_dst} ] ; then
        _dst=${_src}
        echo "WARNING: DESTINATION DATASET NOT SPECIFIED ==> SRC DATASET WILL BE USED: ${_dst}"
    fi

    __setenv

    $ZREP init ${_src} ${_remote} ${_dst} || exit $?
    $ZREP failover ${_src} || exit $?
    for _fs in $(echo ${_children}) ; do
        _dfs=$(echo ${_fs} | sed s#/${_src}#${_dst}#g)
        $ZREP init ${_fs} ${_remote} ${_dfs} || exit $?
        $ZREP failover ${_fs} || exit $?
    done

    __copy_iocage_props_over_ssh ${_src} ${_remote} ${_dst} || exit $?

    __set_iocage_remote_hostid ${_remote} ${_dst} || exit $?

    echo "SUCCESS!"
}


__failover () {
    echo "<FAILOVER>" $1 $2 $3 $4
    local _force _verbose _switch _name _sink _remote _dst _children

    _switch=$1
    _name=$2
    _remote=$3
    _dst=$4
    _force=""
    _verbose=""
    if [ ! -z "${_switch}" -a "${_switch}" == "-f" ] ; then
        _force="1"
    elif [ ! -z "${_switch}" -a "${_switch}" == "-v" ] ; then
        _verbose="1"
    else
        # no switch
        _name=$1
        _remote=$2
        _dst=$3
    fi

    _sink=$(__find ${_name})
    if [ -z "${_sink}" ] ; then
        __die "Sink not found for name: ${_name}"
    fi
    _children="$(zfs list -rH -o name ${_sink} | grep -Ev "${_sink}$|/root$")"
    if [ -z ${children} ] ; then
        echo "WARNING: NO CHILD FS."
    fi

    __zrep_clear ${_sink} || exit $?

    echo "Begin rsink..."
    __rsink ${_src} ${_remote} ${_dst} || exit $?
}

__takeover () {
    echo "<TAKEOVER>" $1 $2

}


__pull () {
    echo "<PULL>" $1 $2
    local _src _children
    _src=$1
    _children="$(zfs list -rH -o name ${_src} | grep -Ev "${_src}$|/root$")"

    __setenv

    for _fs in $(echo ${_children}) ; do
        $ZREP refresh ${_fs} || exit $?
    done

    echo "DONE."
}

__push () {
    echo "<PUSH>" $1 $2
    __die "PUSH NOT YET IMPLEMENTED"
}


__copy_iocage_props_over_ssh () {
    echo "<COPY_ZFS_PROPS_OVER_SSH>" $1 $2 $2
    local _src _dst _remote _zfs_props _zfs_rpc
    _src=$1
    _dst=$3
    _remote=$2
    _zfs_props="$(zfs get -H -o property,value all ${_src} | grep org.freebsd.iocage)"
    _zfs_rpc="$(local _ifs=$IFS
                IFS=$'\n'
                for _prop in ${_zfs_props}; do
                    local _name="$(echo $_prop | awk 'BEGIN { FS = "\t" } ; { print $1 }')"
                    local _prop="$(echo $_prop | awk 'BEGIN { FS = "\t" } ; { print $2 }')"
                    echo "$_name=\"$_prop\" "
                done
                IFS=$_ifs)"

    if [ ! -z "$_zfs_rpc" ] ; then
        $SSH $_remote zfs set ${_zfs_rpc} ${_dst} || exit $?
    fi
}


__set_iocage_remote_hostid () {
    echo "<SET_IOCAGE_HOSTID>" $1 $2 $2
    local _remote _dst _hostid
    _remote=$1
    _dst=$2

    _hostid="$($SSH $_remote cat /etc/hostid || exit $?)"

    $SSH $_remote zfs set org.freebsd.iocage:hostid=${_hostid} ${_dst} || exit $?
}

__zrep_clear () {
    local _src _children _fs
    _src=$1
    _children="$(zfs list -rH -o name ${_src} | grep -Ev "${_src}$|/root$")"

    $ZREP clear ${_src} || exit $?
    for _fs in $(echo ${_children}) ; do
        $ZREP clear ${_fs} || exit $?
    done
}

__die () {
    echo "  ERROR: $@" >&2
    exit 1
}


### MAIN ###
if [ -z "$1" ] ; then
    __usage
    exit 0
fi

__parse_cmd "$@"
