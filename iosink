#!/bin/sh

###
### I/O SINK
###

iocroot="tank/ioc"
ZREP=/usr/local/sbin/zrep
SSH='ssh -p 295'
ZREP_R=''

__setenv () {
    export SSH=$SSH
    export ZREP_R=${ZREP_R}
}


__usage  () {
    echo "iosink usage: ..."
}

__parse_cmd () {
    while [ $# -gt 0 ] ; do
        case "$1" in
            list)  __list "$2"
                   exit
                   ;;
            sink)  __sink "$2" "$3"
                   exit
                   ;;
            rsink) __rsink "$2" "$3" "$4"
                   exit
                   ;;
            pull)  __pull "$2"
                   exit
                   ;;
            push)  __push "$2"
                   exit
                   ;;
            *)     __usage
                   exit
        esac
        shift
    done
}


__list () {
    echo "<LIST>" $1
    local _switch _zrep_list _format _list_type _uuid _tag _fs _pfs _is_child

    _switch=$1
    _zrep_list="$(zrep list)"
    _format="%-4s  %-13s  %-13s  %s\n"

    _list_type=""
    if [ ! -z "${_switch}" -a "${_switch}" == "-j" ] ; then
        _list_type="JAIL"
    elif [ ! -z "${_switch}" -a "${_switch}" == "-b" ] ; then
        _list_type="BASE"
    elif [ ! -z "${_switch}" -a "${_switch}" == "-s" ] ; then
        _list_type="SINK"
    elif [ ! -z "${_switch}" ] ; then
        __die "invalid switch ${_switch}"
    fi

    _pfs="//"
    printf "${_format}" "TYPE" "UUID" "TAG" "FS"
    for _fs in $(echo ${_zrep_list}) ; do
        # continue only if not within a child fs
        _is_child=$(echo ${_fs} | grep "${_pfs}")
        if [ -z "${_is_child}" ] ; then

            _uuid=$(zfs get  -H -o value org.freebsd.iocage:host_hostuuid ${_fs})
            _tag=$(zfs get  -H -o value org.freebsd.iocage:tag ${_fs})

            # TODO: Find latest ZREP ZFS snapshot to get Last Sync date/time...

            if [ ! -z $(echo ${_fs} | grep "${iocroot}" | grep "/base/") ] ; then
                if [ -z "${_list_type}" ] || [ ! -z "${_list_type}" -a "${_list_type}" == "BASE" ] ; then
                    printf "${_format}" "BASE" $_uuid $_tag $_fs
                fi
            elif [ ! -z $(echo ${_fs} | grep "${iocroot}" | grep "/sinks/") ] ; then
                if [ -z "${_list_type}" ] || [ ! -z "${_list_type}" -a "${_list_type}" == "SINK" ] ; then
                    printf "${_format}" "SINK" $_uuid $_tag $_fs
                fi
            elif [ ! -z $(echo ${_fs} | grep "${iocroot}" | grep "/jails/") ] ; then
                if [ -z "${_list_type}" ] || [ ! -z "${_list_type}" -a "${_list_type}" == "JAIL" ] ; then
                    printf "${_format}" "JAIL" $_uuid $_tag $_fs
                fi
            fi
            _pfs=$_fs
        fi
    done

}

__sink () {
    echo "<SINK>" $1 $2
    # TODO: How to zrep without ssh? VS no zrep (do my own or tweak zrep..?)
}

__rsink () {
    echo "<REMOTE SINK>" $1 $2 $3
    local _src_dataset _dst_dataset _dst_host _jail_child_datasets
    _src_dataset=$1
    _dst_dataset=$3
    _dst_host=$2
    _jail_child_datasets="$(zfs list -rH -o name ${_src_dataset} | grep -Ev "${_src_dataset}$|/root$")"

    if [ -z ${_dst_host} ] ; then
        echo "ERROR: NO HOST SPECIFIED."
        exit 1
    fi
    if [ -z ${_dst_dataset} ] ; then
        _dst_dataset=${_src_dataset}
        echo "WARNING: DESTINATION DATASET NOT SPECIFIED ==> SRC DATASET WILL BE USED: ${_dst_dataset}"
    fi

    __setenv

    $ZREP init ${_src_dataset} ${_dst_host} ${_dst_dataset} || exit $?
    $ZREP failover ${_src_dataset} || exit $?
    for _fs in $(echo ${_jail_child_datasets}) ; do
        _dfs=$(echo ${_fs} | sed s#/${_src_dataset}#${_dst_dataset}#g)
        $ZREP init ${_fs} ${_dst_host} ${_dfs} || exit $?
        $ZREP failover ${_fs} || exit $?
    done

    __copy_iocage_props_over_ssh ${_src_dataset} ${_dst_host} ${_dst_dataset} || exit $?

    __set_iocage_remote_hostid ${_dst_host} ${_dst_dataset} || exit $?

    echo "SUCCESS!"
}


__pull () {
    echo "<PULL>" $1 $2
    local _src_dataset _jail_child_datasets
    _src_dataset=$1
    _jail_child_datasets="$(zfs list -rH -o name ${_src_dataset} | grep -Ev "${_src_dataset}$|/root$")"

    __setenv

    for _fs in $(echo ${_jail_child_datasets}) ; do
        $ZREP refresh ${_fs} || exit $?
    done

    echo "DONE."
}

__push () {
    echo "<PUSH>" $1 $2
    echo "PUSH NOT IMPLEMENTED."
}


__copy_iocage_props_over_ssh () {
    echo "<COPY_ZFS_PROPS_OVER_SSH>" $1 $2 $2
    local _src_dataset _dst_dataset _dst_host _zfs_props _zfs_rpc
    _src_dataset=$1
    _dst_dataset=$3
    _dst_host=$2
    _zfs_props="$(zfs get -H -o property,value all ${_src_dataset} | grep org.freebsd.iocage)"
    _zfs_rpc="$(local _ifs=$IFS
                IFS=$'\n'
                for _prop in ${_zfs_props}; do
                    local _name="$(echo $_prop | awk 'BEGIN { FS = "\t" } ; { print $1 }')"
                    local _prop="$(echo $_prop | awk 'BEGIN { FS = "\t" } ; { print $2 }')"
                    echo "$_name=\"$_prop\" "
                done
                IFS=$_ifs)"

    if [ ! -z "$_zfs_rpc" ] ; then
        $SSH $_dst_host zfs set ${_zfs_rpc} ${_dst_dataset} || exit $?
    fi
}


__set_iocage_remote_hostid () {
    echo "<SET_IOCAGE_HOSTID>" $1 $2 $2
    local _dst_host _dst_dataset _hostid
    _dst_host=$1
    _dst_dataset=$2

    _hostid="$($SSH $_dst_host cat /etc/hostid || exit $?)"

    $SSH $_dst_host zfs set org.freebsd.iocage:hostid=${_hostid} ${_dst_dataset} || exit $?
}


# Log error to stderr
__error () {
    echo "  ERROR: $@" >&2
}

# Log error to stderr and exit
__die () {
    echo "  ERROR: $@" >&2
    exit 1
}

# Log info to stdout
__info () {
    echo "  INFO: $@"
}


##### MAIN #####
if [ -z "$1" ] ; then
    __usage
    exit 0
fi

__parse_cmd "$@"
